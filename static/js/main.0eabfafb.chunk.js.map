{"version":3,"sources":["components/Sidebar/Sidebar.component.jsx","components/Registor/FormInput/FormInput.component.jsx","components/Registor/Form.component.jsx","pages/Registor.page.jsx","App.js","serviceWorker.js","index.js"],"names":["Sidebar","className","src","alt","FormInput","props","labelText","nameText","changeDisplay","onclick","DisplayArrow","style","display","type","name","required","onClick","Form","useState","fname","setFname","lname","setLname","email","setEmail","DisplaySubmit","setDisplaySubmit","action","onSubmit","e","preventDefault","typeText","Register","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAYeA,MATf,WACE,OACI,yBAAKC,UAAU,WACV,yBAAKC,IAAI,aAAaC,IAAI,GAAGF,UAAU,iBACvC,wBAAIA,UAAU,yCAAd,mB,mBCOIG,MAXf,SAAmBC,GAAQ,IAChBC,EAA6DD,EAA7DC,UAAWC,EAAkDF,EAAlDE,SAAUC,EAAwCH,EAAxCG,cAAeC,EAAyBJ,EAAzBI,QAASC,EAAgBL,EAAhBK,aACtD,OACE,yBAAKT,UAAU,YAAYU,MAAO,CAACC,QAAQ,GAAD,OAAKJ,KAC1C,2BAAOP,UAAU,wBAAwBK,GAAkB,6BAC5D,2BAAOL,UAAU,qBAAqBY,KAAK,OAAOC,KAAMP,EAAUQ,UAAQ,IAC1E,0BAAMd,UAAU,QAAQU,MAAO,CAACC,QAAQ,GAAD,OAAKF,IAAiBM,QAAS,kBAAIP,MAA1E,YCgDOQ,MArDf,WAAiB,IAAD,EACYC,mBAAS,SADrB,mBACPC,EADO,KACAC,EADA,OAEYF,mBAAS,QAFrB,mBAEPG,EAFO,KAEAC,EAFA,OAGYJ,mBAAS,QAHrB,mBAGPK,EAHO,KAGAC,EAHA,OAI4BN,mBAAS,QAJrC,mBAIPO,EAJO,KAIQC,EAJR,KAoBd,OACE,yBAAKzB,UAAU,QACb,0BAAM0B,OAAO,GAAGC,SAAU,SAACC,GAAD,OAAOA,EAAEC,mBACjC,kBAAC,EAAD,CACExB,UAAU,+BACVyB,SAAS,OACTxB,SAAS,SACTC,cAAeW,EACfV,QAtBR,WACEW,EAAS,QACTE,EAAS,UAqBHZ,aAAa,gBAEf,kBAAC,EAAD,CACEJ,UAAU,8BACVyB,SAAS,OACTxB,SAAS,SACTC,cAAea,EACfZ,QA1BR,WACEa,EAAS,QACTE,EAAS,SACTE,EAAiB,iBAwBXhB,aAAa,gBAEf,kBAAC,EAAD,CACEJ,UAAU,kCACVyB,SAAS,QACTxB,SAAS,QACTC,cAAee,EACfd,QA7BR,WACEe,EAAS,UA6BHd,aAAa,SAEnB,4BAAQG,KAAK,SAASF,MAAO,CAACC,QAAQ,GAAD,OAAKa,IAAkBxB,UAAU,sCAAtE,aCrCW+B,MATf,WACE,OACI,yBAAK/B,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGKgC,MARf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0eabfafb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Sidebar.style.css'\r\n\r\nfunction Sidebar() {\r\n  return (\r\n      <div className=\"Sidebar\">\r\n           <img src=\"./logo.png\" alt=\"\" className=\"sidebar-logo\" />\r\n           <h3 className='display-4 text-white text-center mt-5'>Resister Here</h3>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport \"./FormInput.style.css\";\r\n\r\nfunction FormInput(props) {\r\n    const {labelText, nameText, changeDisplay, onclick, DisplayArrow} = props;\r\n  return (\r\n    <div className=\"FormInput\" style={{display: `${changeDisplay}`}}>\r\n         <label className='display-4 form-label'>{labelText}</label><br/>\r\n        <input className=\"form-control Input\" type=\"text\" name={nameText} required />\r\n        <span className=\"arrow\" style={{display: `${DisplayArrow}`}} onClick={()=>onclick()}>&#10095;</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormInput;\r\n","import React, { useState } from \"react\";\r\nimport \"./Form.style.css\";\r\nimport FormInput from \"./FormInput/FormInput.component\";\r\n\r\nfunction Form() {\r\n  const [fname, setFname] = useState(\"block\");\r\n  const [lname, setLname] = useState(\"none\");\r\n  const [email, setEmail] = useState(\"none\");\r\n  const [DisplaySubmit, setDisplaySubmit] = useState(\"none\");\r\n\r\n  function Fname() {\r\n    setFname(\"none\");\r\n    setLname(\"block\");\r\n  }\r\n  function Lname() {\r\n    setLname('none')\r\n    setEmail(\"block\");\r\n    setDisplaySubmit('inline-block')\r\n  }\r\n  function Email() {\r\n    setEmail(\"block\");\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"Form\">\r\n      <form action=\"\" onSubmit={(e) => e.preventDefault()}>\r\n        <FormInput\r\n          labelText=\"Please Enter Your First Name\"\r\n          typeText=\"text\"\r\n          nameText=\"f-name\"\r\n          changeDisplay={fname}\r\n          onclick={Fname}\r\n          DisplayArrow='inline-flex'\r\n        />\r\n        <FormInput\r\n          labelText=\"Please Enter Your Last Name\"\r\n          typeText=\"text\"\r\n          nameText=\"l-name\"\r\n          changeDisplay={lname}\r\n          onclick={Lname}\r\n          DisplayArrow='inline-flex'\r\n        />\r\n        <FormInput\r\n          labelText=\"Please Enter Your Email Address\"\r\n          typeText=\"email\"\r\n          nameText=\"email\"\r\n          changeDisplay={email}\r\n          onclick={Email}\r\n          DisplayArrow='none'\r\n        />\r\n    <button type=\"submit\" style={{display: `${DisplaySubmit}`}} className=\"btn btn-outline-primary submit-btn\">submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport './Register.style.css'\r\nimport Sidebar from '../components/Sidebar/Sidebar.component'\r\nimport Form from '../components/Registor/Form.component'\r\n\r\nfunction Register() {\r\n  return (\r\n      <div className=\"back\">\r\n          <Sidebar/>\r\n          <Form/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Register;\r\n","import React from 'react';\nimport './App.css';\nimport Register from './pages/Registor.page'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Register/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}